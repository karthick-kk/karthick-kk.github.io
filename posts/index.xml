<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Karthick-K</title>
        <link>https://karthick.it/posts/</link>
        <description>Recent content in Posts on Karthick-K</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 10 May 2021 20:11:40 +0530</lastBuildDate>
        <atom:link href="https://karthick.it/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Tor toggle for Firefox on Arch</title>
            <link>https://karthick.it/posts/2021/05/tor-toggle-for-firefox-on-arch/</link>
            <pubDate>Mon, 10 May 2021 20:11:40 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/05/tor-toggle-for-firefox-on-arch/</guid>
            <description>This article explains how to configure tor/onion network for firefox browser on arch linux. Tor browser(https://www.torproject.org) still remains the recommended or easiest means of using tor network for browsing with privacy.
Install tor and privoxy $ yay -S tor $ yay -S privoxy Starting tor $ sudo systemctl enable tor $ sudo systemctl start tor Starting privoxy Tor client runs on port 9050. Privoxy should be configured to use this socks port to forward all http/https traffic.</description>
            <content type="html"><![CDATA[<hr>
<p>This article explains how to configure tor/onion network for firefox browser on arch linux. Tor browser(<a href="https://www.torproject.org">https://www.torproject.org</a>) still remains the recommended or easiest means of using tor network for browsing with privacy.</p>
<hr>
<h2 id="install-tor-and-privoxy">Install tor and privoxy</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ yay -S tor
</span></span><span style="display:flex;"><span>$ yay -S privoxy
</span></span></code></pre></div><h2 id="starting-tor">Starting tor</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl enable tor
</span></span><span style="display:flex;"><span>$ sudo systemctl start tor
</span></span></code></pre></div><h2 id="starting-privoxy">Starting privoxy</h2>
<p>Tor client runs on port 9050. Privoxy should be configured to use this socks port to forward all http/https traffic. Add the line at the end of the file <code>/etc/privoxy/config</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>forward-socks5 / localhost:9050 .
</span></span></code></pre></div><h2 id="configure-network-proxy-setting">Configure network proxy setting</h2>
<p>Open Firefox-&gt;Preferences and change the network settings to use the new proxy configuration</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>HTTP Proxy -&gt; localhost Port 8118
</span></span><span style="display:flex;"><span>SOCKS Host -&gt; localhost Port 9050
</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/corestackdev/images/main/image-20210510211801331.png" alt="image-20210510211801331"></p>
<h2 id="install-proxy-toggle-addon">Install proxy toggle addon</h2>
<p>Install the proxy toggle addon from <a href="https://addons.mozilla.org/en-US/firefox/addon/proxy-toggle-button">https://addons.mozilla.org/en-US/firefox/addon/proxy-toggle-button</a> to enable/disable <code>tor proxy</code></p>
<p><img src="https://raw.githubusercontent.com/corestackdev/images/main/image-20210510212741684.png" alt="image-20210510212741684"></p>
]]></content>
        </item>
        
        <item>
            <title>Running Github Actions Locally</title>
            <link>https://karthick.it/posts/2021/04/running-github-actions-locally/</link>
            <pubDate>Thu, 29 Apr 2021 17:58:48 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/04/running-github-actions-locally/</guid>
            <description>Actions are usually developed in the GitHub repository where the project itself is hosted. It is often required to modify these workflows multiple times during its development. This requires a commit to the repo everytime to execute/trigger these workflows.
ACT ACT is an opensource project that allows us to test these github workflows locally rather than updating the workflow file directly on the github repository.
Refer README for the installation of act.</description>
            <content type="html"><![CDATA[<hr>
<p>Actions are usually developed in the GitHub repository where the project itself is hosted. It is often required to modify these workflows multiple times during its development. This requires a commit to the repo everytime to execute/trigger these workflows.</p>
<hr>
<h2 id="act">ACT</h2>
<p>ACT is an opensource project that allows us to test these github workflows locally rather than updating the workflow file directly on the github repository.</p>
<p>Refer README for the installation of act.</p>
<p><a href="https://github.com/nektos/act">https://github.com/nektos/act</a></p>
<h2 id="handling-secrets">Handling Secrets</h2>
<p>Secrets can be parsed as commandline arguments or as a dedicated file which holds the variables for the workflow. Secrets file has list of variables and associated values in <code>variable=value</code> form.</p>
<p><img src="https://raw.githubusercontent.com/corestackdev/images/main/image-20210429173740422.png" alt="image-20210429173740422"></p>
<h2 id="runner-image">Runner Image</h2>
<p>Most images from docker hub are capable of running the workflows. Runner defined in the workflow file can be superseeded by a custom docker image as an argument in CLI.</p>
<h2 id="executiontesting-the-workflow">Execution/Testing the Workflow</h2>
<p>Start by cloning the github repository where the github actions are created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ git clone &lt;git url&gt;
</span></span></code></pre></div><p>Change directory to the cloned git path and execute the runner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ act -r --secret-file ~/dev/act/secrets -P self-hosted<span style="color:#f92672">=</span>karthickk/github-runner:latest
</span></span></code></pre></div><ul>
<li>-r - enable re-using the same docker image for successive runs</li>
<li>&ndash;secret-file - file which holds the secrets</li>
<li>self-hosted - is the referenced runner in my workflow file which is overriden by a docker hub image (karthickk/github-runner:latest)</li>
</ul>
<h2 id="limitations">Limitations</h2>
<p>The workflows runs against the latest commit code. GitHub actions cannot be triggered based on a commit ID. However, below is a workaround to run the workflow/action against a  specific commit.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ cd &lt;git cloned path&gt;
</span></span><span style="display:flex;"><span>$ git reset â€“hard &lt;commit-hash&gt;
</span></span><span style="display:flex;"><span>$ act -r --secret-file ~/dev/act/secrets -P self-hosted<span style="color:#f92672">=</span>karthickk/github-runner:latest
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Wireless LAN CLI Configuration under Arch Linux</title>
            <link>https://karthick.it/posts/2021/04/wireless-lan-cli-configuration-under-arch-linux/</link>
            <pubDate>Fri, 09 Apr 2021 09:19:16 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/04/wireless-lan-cli-configuration-under-arch-linux/</guid>
            <description>Steps to configure a wireless adapter to connect to nearby access point by shell commands
Runbook $ sudo systemctl start iwd $ sudo iwctl --passphrase &amp;lt;secret&amp;gt; station wlan0 connect &amp;lt;accesspoint&amp;gt; $ sudo systemctl start dhcpcd@wlan0 </description>
            <content type="html"><![CDATA[<p>Steps to configure a wireless adapter to connect to nearby access point by shell commands</p>
<h4 id="runbook">Runbook</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ sudo systemctl start iwd
</span></span><span style="display:flex;"><span>$ sudo iwctl --passphrase &lt;secret&gt; station wlan0 connect &lt;accesspoint&gt;
</span></span><span style="display:flex;"><span>$ sudo systemctl start dhcpcd@wlan0
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Converting VirtualBox OVA to VMware Compatible OVF</title>
            <link>https://karthick.it/posts/2021/02/converting-virtualbox-ova-to-vmware-compatible-ovf/</link>
            <pubDate>Tue, 23 Feb 2021 14:29:17 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/02/converting-virtualbox-ova-to-vmware-compatible-ovf/</guid>
            <description>This guide use the possible freeware tools to perform the conversion.
Conversion Need? Virtualbox does not generate Vmware Cloud/Vmware ESXi compatible OVA/OVF files
Tools Required Vmware Player
ovftool
** VMware account needed to download (free to signup) **
Conversion Process Step 1:
Export the VM as OVA from virtualbox
Step 2:
Import the OVA on to installed VMware player. When prompted to retry/cancel, proceed with retry importing, ignoring the warning messages any.</description>
            <content type="html"><![CDATA[<hr>
<p>This guide use the possible freeware tools to perform the conversion.</p>
<hr>
<h2 id="conversion-need">Conversion Need?</h2>
<p>Virtualbox does not generate Vmware Cloud/Vmware ESXi compatible OVA/OVF files</p>
<h2 id="tools-required">Tools Required</h2>
<ul>
<li>
<p>Vmware Player</p>
</li>
<li>
<p>ovftool</p>
<p>** VMware account needed to download (free to signup) **</p>
</li>
</ul>
<h2 id="conversion-process">Conversion Process</h2>
<p>Step 1:</p>
<p>Export the VM as OVA from virtualbox</p>
<p>Step 2:</p>
<p>Import the OVA on to installed VMware player. When prompted to retry/cancel, proceed with retry importing, ignoring the warning messages any.</p>
<p>Step 3:</p>
<p>Run the ovftool to generate the .ovf,.mf and .vmdk files of the imported VM</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ ovftool ~/vmware/OL8/OL8.vmx ~/ol8-vmware-exported.ovf                           
</span></span><span style="display:flex;"><span>Opening VMX source: /home/karthick-k/vmware/OL8/OL8.vmx
</span></span><span style="display:flex;"><span>Opening OVF target: /home/karthick-k/ol8-vmware-exported.ovf
</span></span><span style="display:flex;"><span>Writing OVF package: /home/karthick-k/ol8-vmware-exported.ovf
</span></span><span style="display:flex;"><span>Transfer Completed
</span></span><span style="display:flex;"><span>Completed successfully
</span></span></code></pre></div><p>Step 4:</p>
<ul>
<li>
<p>Edit .mf file and remove SHA256 value of .ovf file in first line.</p>
</li>
<li>
<p>Edit .ovf file and change line with string <code>VirtualSystemType</code> with updated vmx-xx version</p>
<p><code>&lt;vssd:VirtualSystemType&gt;vmx-14&lt;/vssd:VirtualSystemType&gt;</code></p>
</li>
</ul>
<p>The files are now ready to be imported with Vmware Cloud or ESXi cluster.</p>
<p>Reference: <a href="https://zhengwu.org/convert-virtual-machine-of-virtualbox-to-esxi/">https://zhengwu.org/convert-virtual-machine-of-virtualbox-to-esxi/</a></p>
]]></content>
        </item>
        
        <item>
            <title>TCP Port Forwarding with Nginx Ingress on a Bare Metal Kubernetes Cluster</title>
            <link>https://karthick.it/posts/2021/02/tcp-port-forwarding-with-nginx-ingress-on-a-bare-metal-kubernetes-cluster/</link>
            <pubDate>Thu, 18 Feb 2021 15:19:18 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/02/tcp-port-forwarding-with-nginx-ingress-on-a-bare-metal-kubernetes-cluster/</guid>
            <description>Ingress is meant for 80 and 443 traffic redirects to services running within the cluster. Exposing a service to outside world other than the HTTP traffic is normally done by NodePort service or kubectl port-forward procedure. The former runs on port numbers above 30000 and the later is commonly used for testing. If we need to get our services running on specific port number for external access, then additional configurations are required on the ingress deployment,service and configmap.</description>
            <content type="html"><![CDATA[<hr>
<p>Ingress is meant for 80 and 443 traffic redirects to services running within the cluster. Exposing a service to outside world other than the HTTP traffic is normally done by NodePort service or <code>kubectl port-forward</code> procedure. The former runs on port numbers above 30000 and the later is commonly used for testing.
If we need to get our services running on specific port number for external access, then additional configurations are required on the ingress deployment,service and configmap. This article covers them each and is applicable for k8s cluster running on cloud/on-premise.</p>
<hr>
<h2 id="install-nginx-ingress-controller">Install Nginx Ingress Controller</h2>
<p>Remove existing nginx controller configuration through helm or <code>kubectl delete ns ingress-nginx</code></p>
<h3 id="install-nginx-ingress">Install nginx ingress</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/baremetal/deploy.yaml
</span></span></code></pre></div><h2 id="configuration-updates">Configuration Updates</h2>
<h3 id="update-nginx-service-configuration">Update nginx service configuration</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl edit service/ingress-nginx-controller -n ingress-nginx
</span></span></code></pre></div><ul>
<li>
<p>The Ingress service type is set to NodePort. This has to be modified and set to LoadBalancer type <code>type: LoadBalancer</code></p>
</li>
<li>
<p>For bare metal clusters, add the attribute  <code>externalIPs:</code> and add either an externally configured load balancer IP or a local network interface IP (typically eth0)</p>
</li>
<li>
<p>Add the required custom TCP ports which are to be opened up through ingress</p>
</li>
</ul>
<p>To expose rabbitmq application ports, these are the typical changes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clusterIP</span>: <span style="color:#ae81ff">10.43.198.64</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">externalIPs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">10.128.0.13</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">externalTrafficPolicy</span>: <span style="color:#ae81ff">Cluster</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">31954</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">31997</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">443</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">https</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">rabbitmq-tcp-15672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">31555</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">rabbitmq-tcp-5672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">31556</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">5672</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">5672</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app.kubernetes.io/component</span>: <span style="color:#ae81ff">controller</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app.kubernetes.io/instance</span>: <span style="color:#ae81ff">ingress-nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app.kubernetes.io/name</span>: <span style="color:#ae81ff">ingress-nginx</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sessionAffinity</span>: <span style="color:#ae81ff">None</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">LoadBalancer</span>
</span></span></code></pre></div><h3 id="update-nginx-deployment-configuration">Update nginx Deployment configuration</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl edit deployment.apps/ingress-nginx-controller -n ingress-nginx
</span></span></code></pre></div><ul>
<li>
<p>Update the controller args to support tcp and udp services.</p>
<p>The 2 arguments must be added to the controller</p>
<p><strong>&ndash;tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</strong></p>
<p><strong>&ndash;udp-services-configmap=$(POD_NAMESPACE)/udp-services</strong></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">/nginx-ingress-controller</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">election-id=ingress-controller-leader</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">ingress-class=nginx</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">udp-services-configmap=$(POD_NAMESPACE)/udp-services</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">validating-webhook=:8443</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">validating-webhook-certificate=/usr/local/certificates/cert</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">validating-webhook-key=/usr/local/certificates/key</span>
</span></span></code></pre></div><ul>
<li>Add the ports to open up on controller pod(s)</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">http</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">443</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">https</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8443</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">webhook</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">rabbitmqadm</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">5672</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">rabbitmqamqp</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span></code></pre></div><h3 id="configmap-changes">ConfigMap Changes</h3>
<p>Create a configmap data for the custom ports - configmap-port-expose.yaml</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ConfigMap</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tcp-services</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">ingress-nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">15672</span>: <span style="color:#e6db74">&#34;rabbitmq/rabbittestha-rabbitmq:15672&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">5672</span>: <span style="color:#e6db74">&#34;rabbitmq/rabbittestha-rabbitmq:5672&#34;</span>
</span></span></code></pre></div><p>Refers - <code>rabbitmq</code> namespace and <code>rabbittestha-rabbitmq</code> service within that namespace</p>
<h2 id="testing">Testing</h2>
<p>Connect to the TCP port using telnet and node IP</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>$ telnet 10.128.0.13 <span style="color:#ae81ff">15672</span>
</span></span><span style="display:flex;"><span>Trying 10.128.0.13...
</span></span><span style="display:flex;"><span>Connected to 10.128.0.13.
</span></span><span style="display:flex;"><span>Escape character is <span style="color:#e6db74">&#39;^]&#39;</span>.
</span></span><span style="display:flex;"><span>^<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>telnet&gt;
</span></span></code></pre></div><p>With an external/Floating/LoadBalancer IP attached to this server, the service will be accessible from outside world</p>
]]></content>
        </item>
        
        <item>
            <title>Awx Upgrade Docker</title>
            <link>https://karthick.it/posts/2021/02/awx-upgrade-docker/</link>
            <pubDate>Fri, 12 Feb 2021 10:15:03 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2021/02/awx-upgrade-docker/</guid>
            <description>This article explains upgrade of awx services running on docker.
Stop AWX Services In some case, tag latest needs to be replaced with current version running on the system.
docker stop awx_task docker rm awx_task docker rmi ansible/awx_task:latest docker stop awx_web docker rm awx_web docker rmi ansible/awx_web:latest Backup Inventory File cp ~/awx/installer/inventory ~/inventory Refresh AWX Code cd ~/awx/installer git stash git pull cd installer Run Upgrade export GPG_TTY=$(tty) cd installer # Review inventory (Update passwords and vars from backed up inventory file) ansible-playbook -i inventory install.</description>
            <content type="html"><![CDATA[<hr>
<p>This article explains upgrade of awx services running on docker.</p>
<hr>
<h2 id="stop-awx-services">Stop AWX Services</h2>
<p>In some case, tag <code>latest</code> needs to be replaced with current version running on the system.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker stop awx_task
</span></span><span style="display:flex;"><span>docker rm awx_task
</span></span><span style="display:flex;"><span>docker rmi ansible/awx_task:latest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker stop awx_web
</span></span><span style="display:flex;"><span>docker rm awx_web
</span></span><span style="display:flex;"><span>docker rmi ansible/awx_web:latest
</span></span></code></pre></div><h2 id="backup-inventory-file">Backup Inventory File</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cp ~/awx/installer/inventory ~/inventory
</span></span></code></pre></div><h2 id="refresh-awx-code">Refresh AWX Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd ~/awx/installer
</span></span><span style="display:flex;"><span>git stash
</span></span><span style="display:flex;"><span>git pull
</span></span><span style="display:flex;"><span>cd installer
</span></span></code></pre></div><h2 id="run-upgrade">Run Upgrade</h2>
<pre tabindex="0"><code>export GPG_TTY=$(tty)
cd installer
# Review inventory (Update passwords and vars from backed up inventory file)
ansible-playbook -i inventory install.yml
</code></pre><blockquote>
<p>If prompted for passphrase input, provide docker hub login password</p>
</blockquote>
<h2 id="start-awx-services">Start AWX Services</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>cd ~/.awx/awxcompose
</span></span><span style="display:flex;"><span>docker-compose up -d
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Clean Chroot Builds on Arch Linux</title>
            <link>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</link>
            <pubDate>Tue, 10 Nov 2020 16:23:49 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</guid>
            <description>A clean chroot build is preferred when there are package dependencies during aur package installation. This article should allow us to perform one such clean chroot build using the guided aur package called clean chroot manager(ccm).
Install CCM yay -S clean-chroot-manager Setup base config for chroot Run the sudo ccm64 c command to generate a default clean-chroot-manager.conf
Create a chroot path running mkdir ~/chroot
Edit this file and update the CHROOTPATH64=&amp;quot;/home/karthick-k/chroot&amp;quot; to a valid path</description>
            <content type="html"><![CDATA[<hr>
<p>A clean chroot build is preferred when there are package dependencies during aur package installation.
This article should allow us to perform one such clean chroot build using the guided aur package called <a href="https://github.com/graysky2/clean-chroot-manager">clean chroot manager(ccm)</a>.</p>
<hr>
<h3 id="install-ccm">Install CCM</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>yay -S clean-chroot-manager
</span></span></code></pre></div><h3 id="setup-base-config-for-chroot">Setup base config for chroot</h3>
<ul>
<li>
<p>Run the <code>sudo ccm64 c</code> command to generate a default <strong>clean-chroot-manager.conf</strong></p>
</li>
<li>
<p>Create a chroot path running <code>mkdir ~/chroot</code></p>
</li>
<li>
<p>Edit this file and update the <code>CHROOTPATH64=&quot;/home/karthick-k/chroot&quot;</code> to a valid path</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>nano ~/.config/clean-chroot-manager.conf
</span></span></code></pre></div><h3 id="build-a-new-aur-package-from-chroot">Build a new aur package from chroot</h3>
<ul>
<li>We could use any package source from aur. I&rsquo;m using <a href="https://aur.archlinux.org/packages/teams-for-linux/">teams for linux</a> in this case</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://aur.archlinux.org/teams-for-linux.git
</span></span></code></pre></div><ul>
<li>Change directory to <strong>PKGBUILD</strong> folder of the aur package</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ cd teams-for-linux; ls -l                       
</span></span><span style="display:flex;"><span>total <span style="color:#ae81ff">164</span>
</span></span><span style="display:flex;"><span>-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k    <span style="color:#ae81ff">459</span> Nov <span style="color:#ae81ff">10</span> 14:01 index.patch
</span></span><span style="display:flex;"><span>-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k   <span style="color:#ae81ff">1833</span> Nov <span style="color:#ae81ff">10</span> 14:01 PKGBUILD
</span></span><span style="display:flex;"><span>-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k    <span style="color:#ae81ff">279</span> Nov <span style="color:#ae81ff">10</span> 14:01 teams-for-linux.desktop
</span></span></code></pre></div><ul>
<li>Build the package</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo ccm64 s
</span></span></code></pre></div><ul>
<li>List the package that are built</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>$ sudo ccm64 l
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span>&gt; Listing out packages in buildroot repo...
</span></span><span style="display:flex;"><span>total 63M
</span></span><span style="display:flex;"><span>-rw-r--r-- <span style="color:#ae81ff">1</span> root root 63M Nov <span style="color:#ae81ff">10</span> 14:34 teams-for-linux-1.0.5-1-x86_64.pkg.tar.zst
</span></span></code></pre></div><h3 id="install-the-package">Install the package</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo pacman -U teams-for-linux-1.0.5-1-x86_64.pkg.tar.zst
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Zsh Setup</title>
            <link>https://karthick.it/posts/2020/11/zsh-setup/</link>
            <pubDate>Thu, 05 Nov 2020 18:32:55 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/zsh-setup/</guid>
            <description>This guide is to provide some quick steps to setup zsh,oh-my-zsh framework with essential plugins and powerline10k theme
Change default shell to zsh sudo usermod -s /usr/bin/zsh $USER Setup oh-my-zsh framework An excellent framework with extensible plugins and themes to manage zsh configurations.
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; Install essential plugins git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Enable installed plugins Update ~/.zshrc file to enable the installed plugins</description>
            <content type="html"><![CDATA[<hr>
<p>This guide is to provide some quick steps to setup zsh,oh-my-zsh framework with essential plugins and powerline10k theme</p>
<hr>
<h2 id="change-default-shell-to-zsh">Change default shell to zsh</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo usermod -s /usr/bin/zsh $USER
</span></span></code></pre></div><h2 id="setup-oh-my-zsh-framework">Setup oh-my-zsh framework</h2>
<p>An excellent framework with extensible plugins and themes to manage zsh configurations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><h3 id="install-essential-plugins">Install essential plugins</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-syntax-highlighting
</span></span><span style="display:flex;"><span>git clone https://github.com/zsh-users/zsh-autosuggestions.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-autosuggestions
</span></span></code></pre></div><h3 id="enable-installed-plugins">Enable installed plugins</h3>
<p>Update <code>~/.zshrc</code> file to enable the installed <strong>plugins</strong></p>
<pre tabindex="0"><code class="language-i\" data-lang="i\">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)
</code></pre><h2 id="installing-powerlevel10k-theme">Installing Powerlevel10K Theme</h2>
<p>Although zsh comes with many pre-installed themes, this external community supported theme standsout.</p>
<h3 id="install-required-fonts">Install required fonts</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>yain ttf-dejavu ttf-meslo-nerd-font-powerlevel10k
</span></span></code></pre></div><h3 id="install-the-theme">Install the theme</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://github.com/romkatv/powerlevel10k.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>$HOME/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/themes/powerlevel10k
</span></span></code></pre></div><p>When the installation is complete, a wizard will guide us through the rest of configuration and tweaks for a powerup shell</p>
<p>The wizard can anytime be re-run with <code>p10k configure</code> command</p>
]]></content>
        </item>
        
        <item>
            <title>Opengl Compositor Crash Fix Restart</title>
            <link>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</link>
            <pubDate>Thu, 05 Nov 2020 14:17:26 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</guid>
            <description>A workaround to get rid of x11/compositor crash in KDE 5.x for Intel HD GPUs
OpenGL-Compositor crash fix on wakeup/unlock event This is a simple workaround to recover from the kde compositor crashes that renders the screen with black artifacts with non-responding UI.
The idea is to keep a script running in the background which capture the dbus event of lock/unlock screen to restart kwin window manager.
Restart script restart_kwin.</description>
            <content type="html"><![CDATA[<hr>
<p>A workaround to get rid of x11/compositor crash in KDE 5.x for Intel HD GPUs</p>
<hr>
<h2 id="opengl-compositor-crash-fix-on-wakeupunlock-event">OpenGL-Compositor crash fix on wakeup/unlock event</h2>
<p>This is a simple workaround to recover from the kde compositor crashes that renders the screen with black artifacts with non-responding UI.</p>
<p>The idea is to keep a script running in the background which capture the dbus event of lock/unlock screen to restart kwin window manager.</p>
<h3 id="restart-script">Restart script</h3>
<blockquote>
<p>restart_kwin.sh</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>dbus-monitor --session <span style="color:#e6db74">&#34;type=&#39;signal&#39;,interface=&#39;org.freedesktop.ScreenSaver&#39;&#34;</span> |
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> read x; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$x<span style="color:#e6db74">&#34;</span> in
</span></span><span style="display:flex;"><span>      *<span style="color:#e6db74">&#34;boolean true&#34;</span>*<span style="color:#f92672">)</span> pkill kwin_x11;;
</span></span><span style="display:flex;"><span>      *<span style="color:#e6db74">&#34;boolean false&#34;</span>*<span style="color:#f92672">)</span> kwin_x11 --replace;;  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h3 id="autostart-task">Autostart task</h3>
<p><img src="https://raw.githubusercontent.com/corestackdev/images/main/image-20201105095954085.png" alt="image-20201105095954085"></p>
<h2 id="how-it-works">How it works</h2>
<p>The autostart script monitors for lock/unlock event continuously in the background. On every unlock event, it triggers a kwin window manager restart using the command <code>kwin_x11 --replace</code></p>
]]></content>
        </item>
        
        <item>
            <title>Encrypt Decrypt With Gpg</title>
            <link>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</link>
            <pubDate>Fri, 30 Oct 2020 00:00:09 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</guid>
            <description> This article explains encryption and decryption of files using GNU gpg
Setup GNU gpg Generate Keys gpg --full-generate-key passphrase is optional Encrypting a file gpg -e -r &amp;#34;karthickk&amp;#34; .wekan.json This creates a file with an extension .gpg
Decrypting a file gpg -o .wekan.json -d .wekan.json.gpg </description>
            <content type="html"><![CDATA[<hr>
<p>This article explains encryption and decryption of files using GNU gpg</p>
<hr>
<h2 id="setup-gnu-gpg">Setup GNU gpg</h2>
<h3 id="generate-keys">Generate Keys</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gpg --full-generate-key
</span></span></code></pre></div><ul>
<li>passphrase is optional</li>
</ul>
<h3 id="encrypting-a-file">Encrypting a file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gpg -e -r <span style="color:#e6db74">&#34;karthickk&#34;</span> .wekan.json
</span></span></code></pre></div><blockquote>
<p>This creates a file with an extension .gpg</p>
</blockquote>
<h3 id="decrypting-a-file">Decrypting a file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gpg -o .wekan.json -d .wekan.json.gpg
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hashicorp Boundary Setup and Demo</title>
            <link>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</link>
            <pubDate>Wed, 28 Oct 2020 14:34:08 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</guid>
            <description>This article explain how to setup a boundary server to authenticate/connect to an internal VM
Boundary Binary Download URL: https://www.boundaryproject.io/downloads
Boundary Server Boundary server has two components - controller and worker. A simple dev server can be started using boundary dev
Server Spec VM - Any Network Interfaces:
- 1 x NAT Network (10.x.x.x) - 1 x Host Only/Bridged Network (192.x.x.x/*) Setting up Pre-requisite Install Postgresql Create docker-compose.yaml
version: &amp;#39;2&amp;#39; services: postgresql: image: &amp;#39;docker.</description>
            <content type="html"><![CDATA[<hr>
<p>This article explain how to setup a boundary server to authenticate/connect to an internal VM</p>
<hr>
<h2 id="boundary-binary-download">Boundary Binary Download</h2>
<p>URL: <a href="https://www.boundaryproject.io/downloads">https://www.boundaryproject.io/downloads</a></p>
<h2 id="boundary-server">Boundary Server</h2>
<p>Boundary server has two components - controller and worker. A simple dev server can be started using <code>boundary dev</code></p>
<h3 id="server-spec">Server Spec</h3>
<p>VM - Any
Network Interfaces:</p>
<pre><code>- 1 x NAT Network (10.x.x.x)
- 1 x Host Only/Bridged Network (192.x.x.x/*)
</code></pre>
<h3 id="setting-up-pre-requisite">Setting up Pre-requisite</h3>
<h4 id="install-postgresql">Install Postgresql</h4>
<p>Create <code>docker-compose.yaml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;2&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">postgresql</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;docker.io/bitnami/postgresql:11-debian-10&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;5432:5432&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;postgresql_data:/bitnami/postgresql&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;ALLOW_EMPTY_PASSWORD=yes&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">POSTGRESQL_USERNAME=postgres</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">POSTGRESQL_PASSWORD=password123</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">POSTGRESQL_DATABASE=boundary</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">postgresql_data</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>
</span></span></code></pre></div><p>Run postgresql docker</p>
<p><code>docker-compose up -d</code></p>
<h3 id="setting-up-controller-and-worker-on-a-single-node">Setting up controller and worker on a single node</h3>
<h4 id="controller-config">Controller Config</h4>
<p>Create config file</p>
<blockquote>
<p>/etc/boundary-controller.hcl</p>
</blockquote>
<pre tabindex="0"><code># Disable memory lock: https://www.man7.org/linux/man-pages/man2/mlock.2.html
disable_mlock = true

# Controller configuration block
controller {
  # This name attr must be unique across all controller instances if running in HA mode
  name = &#34;demo-controller-1&#34;
  description = &#34;A controller for a demo!&#34;

  # Database URL for postgres. This can be a direct &#34;postgres://&#34;
  # URL, or it can be &#34;file://&#34; to read the contents of a file to
  # supply the url, or &#34;env://&#34; to name an environment variable
  # that contains the URL.
  database {
      url = &#34;postgresql://postgres:password123@localhost:5432/boundary?sslmode=disable&#34;
  }
}

# API listener configuration block
listener &#34;tcp&#34; {
  # Should be the address of the NIC that the controller server will be reached on
  address = &#34;192.168.99.102&#34;
  # The purpose of this listener block
  purpose = &#34;api&#34;

  tls_disable = true

  # Uncomment to enable CORS for the Admin UI. Be sure to set the allowed origin(s)
  # to appropriate values.
  #cors_enabled = true
  #cors_allowed_origins = [&#34;yourcorp.yourdomain.com&#34;]
}

# Data-plane listener configuration block (used for worker coordination)
listener &#34;tcp&#34; {
  # Should be the IP of the NIC that the worker will connect on
  address = &#34;192.168.99.102&#34;
  # The purpose of this listener
  purpose = &#34;cluster&#34;

  tls_disable = true
}

# Root KMS configuration block: this is the root key for Boundary
# Use a production KMS such as AWS KMS in production installs
kms &#34;aead&#34; {
  purpose = &#34;root&#34;
  aead_type = &#34;aes-gcm&#34;
  key = &#34;sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung=&#34;
  key_id = &#34;global_root&#34;
}

# Worker authorization KMS
# Use a production KMS such as AWS KMS for production installs
# This key is the same key used in the worker configuration
kms &#34;aead&#34; {
  purpose = &#34;worker-auth&#34;
  aead_type = &#34;aes-gcm&#34;
  key = &#34;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&#34;
  key_id = &#34;global_worker-auth&#34;
}

# Recovery KMS block: configures the recovery key for Boundary
# Use a production KMS such as AWS KMS for production installs
kms &#34;aead&#34; {
  purpose = &#34;recovery&#34;
  aead_type = &#34;aes-gcm&#34;
  key = &#34;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&#34;
  key_id = &#34;global_recovery&#34;
}
</code></pre><h4 id="worker-config">Worker Config</h4>
<p>Create config file</p>
<blockquote>
<p>/etc/boundary-worker.hcl</p>
</blockquote>
<pre tabindex="0"><code>listener &#34;tcp&#34; {
    purpose = &#34;proxy&#34;
    address = &#34;192.168.99.102&#34;
    tls_disable = true
}

worker {
  # Name attr must be unique across workers
  name = &#34;demo-worker-1&#34;
  description = &#34;A default worker created demonstration&#34;

  # Workers must be able to reach controllers on :9202
  controllers = [
    &#34;192.168.99.102&#34;
  ]

  public_addr = &#34;192.168.99.102&#34;
}

# must be same key as used on controller config
kms &#34;aead&#34; {
    purpose = &#34;worker-auth&#34;
    aead_type = &#34;aes-gcm&#34;
    key = &#34;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&#34;
    key_id = &#34;global_worker-auth&#34;
}
</code></pre><h4 id="setting-up-controller-and-worker-service">Setting up Controller and Worker Service</h4>
<p>Create install script</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># Installs the boundary as a service for systemd on linux</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage: ./install.sh &lt;worker|controller&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>TYPE<span style="color:#f92672">=</span>$1
</span></span><span style="display:flex;"><span>NAME<span style="color:#f92672">=</span>boundary
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo cat <span style="color:#e6db74">&lt;&lt; EOF &gt; /etc/systemd/system/${NAME}-${TYPE}.service
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[Unit]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Description=${NAME} ${TYPE}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[Service]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">ExecStart=/usr/local/bin/${NAME} server -config /etc/${NAME}-${TYPE}.hcl
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">User=boundary
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Group=boundary
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">LimitMEMLOCK=infinity
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Capabilities=CAP_IPC_LOCK+ep
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[Install]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">WantedBy=multi-user.target
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the boundary system user and group to ensure we have a no-login</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># user capable of owning and running Boundary</span>
</span></span><span style="display:flex;"><span>sudo adduser --system --group boundary <span style="color:#f92672">||</span> true
</span></span><span style="display:flex;"><span>sudo chown boundary:boundary /etc/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.hcl
</span></span><span style="display:flex;"><span>sudo chown boundary:boundary /usr/local/bin/boundary
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Make sure to initialize the DB before starting the service. This will result in</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># a database already initizalized warning if another controller or worker has done this</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># already, making it a lazy, best effort initialization</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;controller&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  sudo /usr/local/bin/boundary database init -config /etc/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.hcl <span style="color:#f92672">||</span> true
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo chmod <span style="color:#ae81ff">664</span> /etc/systemd/system/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.service
</span></span><span style="display:flex;"><span>sudo systemctl daemon-reload
</span></span><span style="display:flex;"><span>sudo systemctl enable <span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>sudo systemctl start <span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>
</span></span></code></pre></div><p>Run script to setup controller and worker</p>
<pre tabindex="0"><code>sudo ./install.sh controller
sudo ./install.sh worker
</code></pre><p>When the controller is installed, initial auth information is created.</p>
<pre tabindex="0"><code>Initial auth information:
  Auth Method ID:     ampw_8KHJD8hQRJ
  Login Name:         admin
  Password:           ycgHbdayxhYoZG4HaMaj
</code></pre><blockquote>
<p>Note: Preserve login information for initial UI login - http://192.168.99.102:9200</p>
</blockquote>
<h2 id="connecting-to-vm-via-boundary-server">Connecting to VM via Boundary Server</h2>
<p>Authenticate server</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.99.102:9200 boundary authenticate password -auth-method-id<span style="color:#f92672">=</span>ampw_8KHJD8hQRJ -login-name<span style="color:#f92672">=</span>admin -password<span style="color:#f92672">=</span>ycgHbdayxhYoZG4HaMaj
</span></span></code></pre></div><p>Connect SSH</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.99.102:9200 boundary connect ssh -target-id ttcp_yj50ER3Uq3 -token at_Zh5SfzpyYR_s1bWQSM96NgAY9UAy1W235eL3fiaui4QNBkhEkSnYy7ReY24ME2bYK3FtZGZWfX3C7NGPbPABNcgGusvRjQ1EFwc2AS7v1rq6Xxjv1fYnmwDbrLmV7UHdkP5y9ZUxFnN6BAtwRnTH82g2Q -- -l osboxes
</span></span></code></pre></div><p>Users &amp; Access</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>boundary roles update -grant-scope-id<span style="color:#f92672">=</span>p_tkwQtiybAR -id<span style="color:#f92672">=</span>r_MJpRFZlFsO -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi
</span></span><span style="display:flex;"><span>BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.50.10:9200 boundary roles list -scope-id p_tkwQtiybAR -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi
</span></span><span style="display:flex;"><span>BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.50.10:9200 boundary connect ssh -target-id ttcp_jRA1wIGwVS -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi -- -l vagrant
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
