<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Karthick-K</title>
        <link>https://karthick.it/posts/</link>
        <description>Recent content in Posts on Karthick-K</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 10 Nov 2020 16:23:49 +0530</lastBuildDate>
        <atom:link href="https://karthick.it/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Clean Chroot Builds on Arch Linux</title>
            <link>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</link>
            <pubDate>Tue, 10 Nov 2020 16:23:49 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</guid>
            <description>A clean chroot build is preferred when there are package dependencies during aur package installation. This article should allow us to perform one such clean chroot build using the guided aur package called clean chroot manager(ccm).
 Install CCM yay -S clean-chroot-manager Setup base config for chroot   Run the sudo ccm64 c command to generate a default clean-chroot-manager.conf
  Create a chroot path running mkdir ~/chroot</description>
            <content type="html"><![CDATA[<hr>
<p>A clean chroot build is preferred when there are package dependencies during aur package installation.
This article should allow us to perform one such clean chroot build using the guided aur package called <a href="https://github.com/graysky2/clean-chroot-manager">clean chroot manager(ccm)</a>.</p>
<hr>
<h3 id="install-ccm">Install CCM</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yay -S clean-chroot-manager
</code></pre></div><h3 id="setup-base-config-for-chroot">Setup base config for chroot</h3>
<ul>
<li>
<p>Run the <code>sudo ccm64 c</code> command to generate a default <strong>clean-chroot-manager.conf</strong></p>
</li>
<li>
<p>Create a chroot path running <code>mkdir ~/chroot</code></p>
</li>
<li>
<p>Edit this file and update the <code>CHROOTPATH64=&quot;/home/karthick-k/chroot&quot;</code> to a valid path</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nano ~/.config/clean-chroot-manager.conf
</code></pre></div><h3 id="build-a-new-aur-package-from-chroot">Build a new aur package from chroot</h3>
<ul>
<li>We could use any package source from aur. I&rsquo;m using <a href="https://aur.archlinux.org/packages/teams-for-linux/">teams for linux</a> in this case</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://aur.archlinux.org/teams-for-linux.git
</code></pre></div><ul>
<li>Change directory to <strong>PKGBUILD</strong> folder of the aur package</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd teams-for-linux; ls -l                       
total <span style="color:#ae81ff">164</span>
-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k    <span style="color:#ae81ff">459</span> Nov <span style="color:#ae81ff">10</span> 14:01 index.patch
-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k   <span style="color:#ae81ff">1833</span> Nov <span style="color:#ae81ff">10</span> 14:01 PKGBUILD
-rw-r--r-- <span style="color:#ae81ff">1</span> karthick-k karthick-k    <span style="color:#ae81ff">279</span> Nov <span style="color:#ae81ff">10</span> 14:01 teams-for-linux.desktop
</code></pre></div><ul>
<li>Build the package</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ccm64 s
</code></pre></div><ul>
<li>List the package that are built</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo ccm64 l
<span style="color:#f92672">==</span>&gt; Listing out packages in buildroot repo...
total 63M
-rw-r--r-- <span style="color:#ae81ff">1</span> root root 63M Nov <span style="color:#ae81ff">10</span> 14:34 teams-for-linux-1.0.5-1-x86_64.pkg.tar.zst
</code></pre></div><h3 id="install-the-package">Install the package</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo pacman -U teams-for-linux-1.0.5-1-x86_64.pkg.tar.zst
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Zsh Setup</title>
            <link>https://karthick.it/posts/2020/11/zsh-setup/</link>
            <pubDate>Thu, 05 Nov 2020 18:32:55 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/zsh-setup/</guid>
            <description>This guide is to provide some quick steps to setup zsh,oh-my-zsh framework with essential plugins and powerline10k theme
 Change default shell to zsh sudo usermod -s /usr/bin/zsh $USER Setup oh-my-zsh framework An excellent framework with extensible plugins and themes to manage zsh configurations.
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; Install essential plugins git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Enable installed plugins Update ~/.zshrc file to enable the installed plugins</description>
            <content type="html"><![CDATA[<hr>
<p>This guide is to provide some quick steps to setup zsh,oh-my-zsh framework with essential plugins and powerline10k theme</p>
<hr>
<h2 id="change-default-shell-to-zsh">Change default shell to zsh</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo usermod -s /usr/bin/zsh $USER
</code></pre></div><h2 id="setup-oh-my-zsh-framework">Setup oh-my-zsh framework</h2>
<p>An excellent framework with extensible plugins and themes to manage zsh configurations.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h3 id="install-essential-plugins">Install essential plugins</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-autosuggestions
</code></pre></div><h3 id="enable-installed-plugins">Enable installed plugins</h3>
<p>Update <code>~/.zshrc</code> file to enable the installed <strong>plugins</strong></p>
<pre><code class="language-i\" data-lang="i\">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)
</code></pre><h2 id="installing-powerlevel10k-theme">Installing Powerlevel10K Theme</h2>
<p>Although zsh comes with many pre-installed themes, this external community supported theme standsout.</p>
<h3 id="install-required-fonts">Install required fonts</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yain ttf-dejavu ttf-meslo-nerd-font-powerlevel10k
</code></pre></div><h3 id="install-the-theme">Install the theme</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> https://github.com/romkatv/powerlevel10k.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>$HOME/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/themes/powerlevel10k
</code></pre></div><p>When the installation is complete, a wizard will guide us through the rest of configuration and tweaks for a powerup shell</p>
<p>The wizard can anytime be re-run with <code>p10k configure</code> command</p>
]]></content>
        </item>
        
        <item>
            <title>Opengl Compositor Crash Fix Restart</title>
            <link>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</link>
            <pubDate>Thu, 05 Nov 2020 14:17:26 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</guid>
            <description>A workaround to get rid of x11/compositor crash in KDE 5.x for Intel HD GPUs
 OpenGL-Compositor crash fix on wakeup/unlock event This is a simple workaround to recover from the kde compositor crashes that renders the screen with black artifacts with non-responding UI.
The idea is to keep a script running in the background which capture the dbus event of lock/unlock screen to restart kwin window manager.
Restart script  restart_kwin.</description>
            <content type="html"><![CDATA[<hr>
<p>A workaround to get rid of x11/compositor crash in KDE 5.x for Intel HD GPUs</p>
<hr>
<h2 id="opengl-compositor-crash-fix-on-wakeupunlock-event">OpenGL-Compositor crash fix on wakeup/unlock event</h2>
<p>This is a simple workaround to recover from the kde compositor crashes that renders the screen with black artifacts with non-responding UI.</p>
<p>The idea is to keep a script running in the background which capture the dbus event of lock/unlock screen to restart kwin window manager.</p>
<h3 id="restart-script">Restart script</h3>
<blockquote>
<p>restart_kwin.sh</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">dbus-monitor --session <span style="color:#e6db74">&#34;type=&#39;signal&#39;,interface=&#39;org.freedesktop.ScreenSaver&#39;&#34;</span> |
  <span style="color:#66d9ef">while</span> read x; <span style="color:#66d9ef">do</span>
    <span style="color:#66d9ef">case</span> <span style="color:#e6db74">&#34;</span>$x<span style="color:#e6db74">&#34;</span> in
      *<span style="color:#e6db74">&#34;boolean true&#34;</span>*<span style="color:#f92672">)</span> pkill kwin_x11;;
      *<span style="color:#e6db74">&#34;boolean false&#34;</span>*<span style="color:#f92672">)</span> kwin_x11 --replace;;  
    <span style="color:#66d9ef">esac</span>
  <span style="color:#66d9ef">done</span>
</code></pre></div><h3 id="autostart-task">Autostart task</h3>
<p><img src="https://raw.githubusercontent.com/corestackdev/images/main/image-20201105095954085.png" alt="image-20201105095954085"></p>
<h2 id="how-it-works">How it works</h2>
<p>The autostart script monitors for lock/unlock event continuously in the background. On every unlock event, it triggers a kwin window manager restart using the command <code>kwin_x11 --replace</code></p>
]]></content>
        </item>
        
        <item>
            <title>Encrypt Decrypt With Gpg</title>
            <link>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</link>
            <pubDate>Fri, 30 Oct 2020 00:00:09 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</guid>
            <description> This article explains encryption and decryption of files using GNU gpg
 Setup GNU gpg Generate Keys gpg --full-generate-key  passphrase is optional  Encrypting a file gpg -e -r &amp;#34;karthickk&amp;#34; .wekan.json  This creates a file with an extension .gpg
 Decrypting a file gpg -o .wekan.json -d .wekan.json.gpg </description>
            <content type="html"><![CDATA[<hr>
<p>This article explains encryption and decryption of files using GNU gpg</p>
<hr>
<h2 id="setup-gnu-gpg">Setup GNU gpg</h2>
<h3 id="generate-keys">Generate Keys</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gpg --full-generate-key
</code></pre></div><ul>
<li>passphrase is optional</li>
</ul>
<h3 id="encrypting-a-file">Encrypting a file</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gpg -e -r <span style="color:#e6db74">&#34;karthickk&#34;</span> .wekan.json
</code></pre></div><blockquote>
<p>This creates a file with an extension .gpg</p>
</blockquote>
<h3 id="decrypting-a-file">Decrypting a file</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gpg -o .wekan.json -d .wekan.json.gpg
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hashicorp Boundary Setup and Demo</title>
            <link>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</link>
            <pubDate>Wed, 28 Oct 2020 14:34:08 +0530</pubDate>
            
            <guid>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</guid>
            <description>This article explain how to setup a boundary server to authenticate/connect to an internal VM
 Boundary Binary Download URL: https://www.boundaryproject.io/downloads
Boundary Server Boundary server has two components - controller and worker. A simple dev server can be started using boundary dev
Server Spec VM - Any Network Interfaces:
- 1 x NAT Network (10.x.x.x) - 1 x Host Only/Bridged Network (192.x.x.x/*)  Setting up Pre-requisite Install Postgresql Create docker-compose.</description>
            <content type="html"><![CDATA[<hr>
<p>This article explain how to setup a boundary server to authenticate/connect to an internal VM</p>
<hr>
<h2 id="boundary-binary-download">Boundary Binary Download</h2>
<p>URL: <a href="https://www.boundaryproject.io/downloads">https://www.boundaryproject.io/downloads</a></p>
<h2 id="boundary-server">Boundary Server</h2>
<p>Boundary server has two components - controller and worker. A simple dev server can be started using <code>boundary dev</code></p>
<h3 id="server-spec">Server Spec</h3>
<p>VM - Any
Network Interfaces:</p>
<pre><code>- 1 x NAT Network (10.x.x.x)
- 1 x Host Only/Bridged Network (192.x.x.x/*)
</code></pre>
<h3 id="setting-up-pre-requisite">Setting up Pre-requisite</h3>
<h4 id="install-postgresql">Install Postgresql</h4>
<p>Create <code>docker-compose.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;2&#39;</span>

<span style="color:#f92672">services</span>:
  <span style="color:#f92672">postgresql</span>:
    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;docker.io/bitnami/postgresql:11-debian-10&#39;</span>
    <span style="color:#f92672">ports</span>:
      - <span style="color:#e6db74">&#39;5432:5432&#39;</span>
    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#39;postgresql_data:/bitnami/postgresql&#39;</span>
    <span style="color:#f92672">environment</span>:
      - <span style="color:#e6db74">&#39;ALLOW_EMPTY_PASSWORD=yes&#39;</span>
      - <span style="color:#ae81ff">POSTGRESQL_USERNAME=postgres</span>
      - <span style="color:#ae81ff">POSTGRESQL_PASSWORD=password123</span>
      - <span style="color:#ae81ff">POSTGRESQL_DATABASE=boundary</span>
<span style="color:#f92672">volumes</span>:
  <span style="color:#f92672">postgresql_data</span>:
    <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">local</span>

</code></pre></div><p>Run postgresql docker</p>
<p><code>docker-compose up -d</code></p>
<h3 id="setting-up-controller-and-worker-on-a-single-node">Setting up controller and worker on a single node</h3>
<h4 id="controller-config">Controller Config</h4>
<p>Create config file</p>
<blockquote>
<p>/etc/boundary-controller.hcl</p>
</blockquote>
<pre><code># Disable memory lock: https://www.man7.org/linux/man-pages/man2/mlock.2.html
disable_mlock = true

# Controller configuration block
controller {
  # This name attr must be unique across all controller instances if running in HA mode
  name = &quot;demo-controller-1&quot;
  description = &quot;A controller for a demo!&quot;

  # Database URL for postgres. This can be a direct &quot;postgres://&quot;
  # URL, or it can be &quot;file://&quot; to read the contents of a file to
  # supply the url, or &quot;env://&quot; to name an environment variable
  # that contains the URL.
  database {
      url = &quot;postgresql://postgres:password123@localhost:5432/boundary?sslmode=disable&quot;
  }
}

# API listener configuration block
listener &quot;tcp&quot; {
  # Should be the address of the NIC that the controller server will be reached on
  address = &quot;192.168.99.102&quot;
  # The purpose of this listener block
  purpose = &quot;api&quot;

  tls_disable = true

  # Uncomment to enable CORS for the Admin UI. Be sure to set the allowed origin(s)
  # to appropriate values.
  #cors_enabled = true
  #cors_allowed_origins = [&quot;yourcorp.yourdomain.com&quot;]
}

# Data-plane listener configuration block (used for worker coordination)
listener &quot;tcp&quot; {
  # Should be the IP of the NIC that the worker will connect on
  address = &quot;192.168.99.102&quot;
  # The purpose of this listener
  purpose = &quot;cluster&quot;

  tls_disable = true
}

# Root KMS configuration block: this is the root key for Boundary
# Use a production KMS such as AWS KMS in production installs
kms &quot;aead&quot; {
  purpose = &quot;root&quot;
  aead_type = &quot;aes-gcm&quot;
  key = &quot;sP1fnF5Xz85RrXyELHFeZg9Ad2qt4Z4bgNHVGtD6ung=&quot;
  key_id = &quot;global_root&quot;
}

# Worker authorization KMS
# Use a production KMS such as AWS KMS for production installs
# This key is the same key used in the worker configuration
kms &quot;aead&quot; {
  purpose = &quot;worker-auth&quot;
  aead_type = &quot;aes-gcm&quot;
  key = &quot;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&quot;
  key_id = &quot;global_worker-auth&quot;
}

# Recovery KMS block: configures the recovery key for Boundary
# Use a production KMS such as AWS KMS for production installs
kms &quot;aead&quot; {
  purpose = &quot;recovery&quot;
  aead_type = &quot;aes-gcm&quot;
  key = &quot;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&quot;
  key_id = &quot;global_recovery&quot;
}
</code></pre><h4 id="worker-config">Worker Config</h4>
<p>Create config file</p>
<blockquote>
<p>/etc/boundary-worker.hcl</p>
</blockquote>
<pre><code>listener &quot;tcp&quot; {
    purpose = &quot;proxy&quot;
    address = &quot;192.168.99.102&quot;
    tls_disable = true
}

worker {
  # Name attr must be unique across workers
  name = &quot;demo-worker-1&quot;
  description = &quot;A default worker created demonstration&quot;

  # Workers must be able to reach controllers on :9202
  controllers = [
    &quot;192.168.99.102&quot;
  ]

  public_addr = &quot;192.168.99.102&quot;
}

# must be same key as used on controller config
kms &quot;aead&quot; {
    purpose = &quot;worker-auth&quot;
    aead_type = &quot;aes-gcm&quot;
    key = &quot;8fZBjCUfN0TzjEGLQldGY4+iE9AkOvCfjh7+p0GtRBQ=&quot;
    key_id = &quot;global_worker-auth&quot;
}
</code></pre><h4 id="setting-up-controller-and-worker-service">Setting up Controller and Worker Service</h4>
<p>Create install script</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span><span style="color:#75715e"># Installs the boundary as a service for systemd on linux</span>
<span style="color:#75715e"># Usage: ./install.sh &lt;worker|controller&gt;</span>

TYPE<span style="color:#f92672">=</span>$1
NAME<span style="color:#f92672">=</span>boundary

sudo cat <span style="color:#e6db74">&lt;&lt; EOF &gt; /etc/systemd/system/${NAME}-${TYPE}.service
</span><span style="color:#e6db74">[Unit]
</span><span style="color:#e6db74">Description=${NAME} ${TYPE}
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">[Service]
</span><span style="color:#e6db74">ExecStart=/usr/local/bin/${NAME} server -config /etc/${NAME}-${TYPE}.hcl
</span><span style="color:#e6db74">User=boundary
</span><span style="color:#e6db74">Group=boundary
</span><span style="color:#e6db74">LimitMEMLOCK=infinity
</span><span style="color:#e6db74">Capabilities=CAP_IPC_LOCK+ep
</span><span style="color:#e6db74">CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">[Install]
</span><span style="color:#e6db74">WantedBy=multi-user.target
</span><span style="color:#e6db74">EOF</span>

<span style="color:#75715e"># Add the boundary system user and group to ensure we have a no-login</span>
<span style="color:#75715e"># user capable of owning and running Boundary</span>
sudo adduser --system --group boundary <span style="color:#f92672">||</span> true
sudo chown boundary:boundary /etc/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.hcl
sudo chown boundary:boundary /usr/local/bin/boundary

<span style="color:#75715e"># Make sure to initialize the DB before starting the service. This will result in</span>
<span style="color:#75715e"># a database already initizalized warning if another controller or worker has done this</span>
<span style="color:#75715e"># already, making it a lazy, best effort initialization</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;controller&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  sudo /usr/local/bin/boundary database init -config /etc/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.hcl <span style="color:#f92672">||</span> true
<span style="color:#66d9ef">fi</span>

sudo chmod <span style="color:#ae81ff">664</span> /etc/systemd/system/<span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>.service
sudo systemctl daemon-reload
sudo systemctl enable <span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>
sudo systemctl start <span style="color:#e6db74">${</span>NAME<span style="color:#e6db74">}</span>-<span style="color:#e6db74">${</span>TYPE<span style="color:#e6db74">}</span>
</code></pre></div><p>Run script to setup controller and worker</p>
<pre><code>sudo ./install.sh controller
sudo ./install.sh worker
</code></pre><p>When the controller is installed, initial auth information is created.</p>
<pre><code>Initial auth information:
  Auth Method ID:     ampw_8KHJD8hQRJ
  Login Name:         admin
  Password:           ycgHbdayxhYoZG4HaMaj
</code></pre><blockquote>
<p>Note: Preserve login information for initial UI login - http://192.168.99.102:9200</p>
</blockquote>
<h2 id="connecting-to-vm-via-boundary-server">Connecting to VM via Boundary Server</h2>
<p>Authenticate server</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.99.102:9200 boundary authenticate password -auth-method-id<span style="color:#f92672">=</span>ampw_8KHJD8hQRJ -login-name<span style="color:#f92672">=</span>admin -password<span style="color:#f92672">=</span>ycgHbdayxhYoZG4HaMaj
</code></pre></div><p>Connect SSH</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.99.102:9200 boundary connect ssh -target-id ttcp_yj50ER3Uq3 -token at_Zh5SfzpyYR_s1bWQSM96NgAY9UAy1W235eL3fiaui4QNBkhEkSnYy7ReY24ME2bYK3FtZGZWfX3C7NGPbPABNcgGusvRjQ1EFwc2AS7v1rq6Xxjv1fYnmwDbrLmV7UHdkP5y9ZUxFnN6BAtwRnTH82g2Q -- -l osboxes
</code></pre></div><p>Users &amp; Access</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">boundary roles update -grant-scope-id<span style="color:#f92672">=</span>p_tkwQtiybAR -id<span style="color:#f92672">=</span>r_MJpRFZlFsO -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi
BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.50.10:9200 boundary roles list -scope-id p_tkwQtiybAR -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi
BOUNDARY_ADDR<span style="color:#f92672">=</span>http://192.168.50.10:9200 boundary connect ssh -target-id ttcp_jRA1wIGwVS -token at_i0VuJvNsla_s1Dy8URtX8J23CUmcZt6v3SN3xdPYTFLFxztgF6bGB8JqPWZwVRGEkrpTqPa9Bc5xVRNY4v2o63b8WAfa1xTwLqufUMfXUz17JCpDjsi -- -l vagrant
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
