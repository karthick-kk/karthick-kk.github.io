<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Karthick-K</title>
    <link>https://karthick.it/</link>
    <description>Recent content on Karthick-K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 29 Apr 2021 17:58:48 +0530</lastBuildDate><atom:link href="https://karthick.it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Github Actions Locally</title>
      <link>https://karthick.it/posts/2021/04/running-github-actions-locally/</link>
      <pubDate>Thu, 29 Apr 2021 17:58:48 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2021/04/running-github-actions-locally/</guid>
      <description>Actions are usually developed in the GitHub repository where the project itself is hosted. It is often required to modify these workflows multiple times during its development. This requires a commit to the repo everytime to execute/trigger these workflows.
 ACT ACT is an opensource project that allows us to test these github workflows locally rather than updating the workflow file directly on the github repository.
Refer README for the installation of act.</description>
    </item>
    
    <item>
      <title>Wireless LAN CLI Configuration under Arch Linux</title>
      <link>https://karthick.it/posts/2021/04/wireless-lan-cli-configuration-under-arch-linux/</link>
      <pubDate>Fri, 09 Apr 2021 09:19:16 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2021/04/wireless-lan-cli-configuration-under-arch-linux/</guid>
      <description>Steps to configure a wireless adapter to connect to nearby access point by shell commands
Runbook $ sudo systemctl start iwd $ sudo iwctl --passphrase &amp;lt;secret&amp;gt; station wlan0 connect &amp;lt;accesspoint&amp;gt; $ sudo systemctl start dhcpcd@wlan0 </description>
    </item>
    
    <item>
      <title>Converting VirtualBox OVA to VMware Compatible OVF</title>
      <link>https://karthick.it/posts/2021/02/converting-virtualbox-ova-to-vmware-compatible-ovf/</link>
      <pubDate>Tue, 23 Feb 2021 14:29:17 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2021/02/converting-virtualbox-ova-to-vmware-compatible-ovf/</guid>
      <description>This guide use the possible freeware tools to perform the conversion.
 Conversion Need? Virtualbox does not generate Vmware Cloud/Vmware ESXi compatible OVA/OVF files
Tools Required   Vmware Player
  ovftool
** VMware account needed to download (free to signup) **
  Conversion Process Step 1:
Export the VM as OVA from virtualbox
Step 2:
Import the OVA on to installed VMware player. When prompted to retry/cancel, proceed with retry importing, ignoring the warning messages any.</description>
    </item>
    
    <item>
      <title>TCP Port Forwarding with Nginx Ingress on a Bare Metal Kubernetes Cluster</title>
      <link>https://karthick.it/posts/2021/02/tcp-port-forwarding-with-nginx-ingress-on-a-bare-metal-kubernetes-cluster/</link>
      <pubDate>Thu, 18 Feb 2021 15:19:18 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2021/02/tcp-port-forwarding-with-nginx-ingress-on-a-bare-metal-kubernetes-cluster/</guid>
      <description>Ingress is meant for 80 and 443 traffic redirects to services running within the cluster. Exposing a service to outside world other than the HTTP traffic is normally done by NodePort service or kubectl port-forward procedure. The former runs on port numbers above 30000 and the later is commonly used for testing. If we need to get our services running on specific port number for external access, then additional configurations are required on the ingress deployment,service and configmap.</description>
    </item>
    
    <item>
      <title>Awx Upgrade Docker</title>
      <link>https://karthick.it/posts/2021/02/awx-upgrade-docker/</link>
      <pubDate>Fri, 12 Feb 2021 10:15:03 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2021/02/awx-upgrade-docker/</guid>
      <description>This article explains upgrade of awx services running on docker.
 Stop AWX Services In some case, tag latest needs to be replaced with current version running on the system.
docker stop awx_task docker rm awx_task docker rmi ansible/awx_task:latest docker stop awx_web docker rm awx_web docker rmi ansible/awx_web:latest Backup Inventory File cp ~/awx/installer/inventory ~/inventory Refresh AWX Code cd ~/awx/installer git stash git pull cd installer Run Upgrade export GPG_TTY=$(tty) cd installer # Review inventory (Update passwords and vars from backed up inventory file) ansible-playbook -i inventory install.</description>
    </item>
    
    <item>
      <title>Clean Chroot Builds on Arch Linux</title>
      <link>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</link>
      <pubDate>Tue, 10 Nov 2020 16:23:49 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2020/11/clean-chroot-builds-on-arch-linux/</guid>
      <description>A clean chroot build is preferred when there are package dependencies during aur package installation. This article should allow us to perform one such clean chroot build using the guided aur package called clean chroot manager(ccm).
 Install CCM yay -S clean-chroot-manager Setup base config for chroot   Run the sudo ccm64 c command to generate a default clean-chroot-manager.conf
  Create a chroot path running mkdir ~/chroot</description>
    </item>
    
    <item>
      <title>Zsh Setup</title>
      <link>https://karthick.it/posts/2020/11/zsh-setup/</link>
      <pubDate>Thu, 05 Nov 2020 18:32:55 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2020/11/zsh-setup/</guid>
      <description>This guide is to provide some quick steps to setup zsh,oh-my-zsh framework with essential plugins and powerline10k theme
 Change default shell to zsh sudo usermod -s /usr/bin/zsh $USER Setup oh-my-zsh framework An excellent framework with extensible plugins and themes to manage zsh configurations.
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; Install essential plugins git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Enable installed plugins Update ~/.zshrc file to enable the installed plugins</description>
    </item>
    
    <item>
      <title>Opengl Compositor Crash Fix Restart</title>
      <link>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</link>
      <pubDate>Thu, 05 Nov 2020 14:17:26 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2020/11/opengl-compositor-crash-fix-restart/</guid>
      <description>A workaround to get rid of x11/compositor crash in KDE 5.x for Intel HD GPUs
 OpenGL-Compositor crash fix on wakeup/unlock event This is a simple workaround to recover from the kde compositor crashes that renders the screen with black artifacts with non-responding UI.
The idea is to keep a script running in the background which capture the dbus event of lock/unlock screen to restart kwin window manager.
Restart script  restart_kwin.</description>
    </item>
    
    <item>
      <title>Encrypt Decrypt With Gpg</title>
      <link>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:09 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2020/10/encrypt-decrypt-with-gpg/</guid>
      <description> This article explains encryption and decryption of files using GNU gpg
 Setup GNU gpg Generate Keys gpg --full-generate-key  passphrase is optional  Encrypting a file gpg -e -r &amp;#34;karthickk&amp;#34; .wekan.json  This creates a file with an extension .gpg
 Decrypting a file gpg -o .wekan.json -d .wekan.json.gpg </description>
    </item>
    
    <item>
      <title>Hashicorp Boundary Setup and Demo</title>
      <link>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</link>
      <pubDate>Wed, 28 Oct 2020 14:34:08 +0530</pubDate>
      
      <guid>https://karthick.it/posts/2020/10/hashicorp-boundary-setup-and-demo/</guid>
      <description>This article explain how to setup a boundary server to authenticate/connect to an internal VM
 Boundary Binary Download URL: https://www.boundaryproject.io/downloads
Boundary Server Boundary server has two components - controller and worker. A simple dev server can be started using boundary dev
Server Spec VM - Any Network Interfaces:
- 1 x NAT Network (10.x.x.x) - 1 x Host Only/Bridged Network (192.x.x.x/*)  Setting up Pre-requisite Install Postgresql Create docker-compose.</description>
    </item>
    
  </channel>
</rss>
